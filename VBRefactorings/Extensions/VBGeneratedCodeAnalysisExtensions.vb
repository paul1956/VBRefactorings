' Licensed to the .NET Foundation under one or more agreements.
' The .NET Foundation licenses this file to you under the MIT license.
' See the LICENSE file in the project root for more information.

Imports Microsoft.CodeAnalysis
Imports Microsoft.CodeAnalysis.Diagnostics
Imports Microsoft.CodeAnalysis.VisualBasic
Imports Microsoft.CodeAnalysis.VisualBasic.Syntax
Imports System.Runtime.CompilerServices

Public Module VBGeneratedCodeAnalysisExtensions
    Private ReadOnly generatedCodeAttributes() As String = {"DebuggerNonUserCode", "GeneratedCode", NameOf(DebuggerNonUserCodeAttribute), "GeneratedCodeAttribute"}

    <Extension> Public Function HasAutoGeneratedComment(tree As SyntaxTree) As Boolean
        Dim root As SyntaxNode = tree.GetRoot()
        If root Is Nothing Then Return False
        Dim firstToken As SyntaxToken = root.GetFirstToken()
        Dim trivia As SyntaxTriviaList
        If firstToken = Nothing Then
            Dim token As SyntaxToken = DirectCast(root, CompilationUnitSyntax).EndOfFileToken
            If token.HasLeadingTrivia = False Then Return False
            trivia = token.LeadingTrivia
        Else
            If firstToken.HasLeadingTrivia = False Then Return False
            trivia = firstToken.LeadingTrivia
        End If
        Dim commentLines As List(Of SyntaxTrivia) = trivia.Where(Function(t As SyntaxTrivia) t.IsKind(SyntaxKind.CommentTrivia)).Take(2).ToList()
        If commentLines.Count <> 2 Then Return False
        Return commentLines(1).ToString() = "' <auto-generated>"
    End Function

    <Extension> Public Function IsGenerated(node As SyntaxNode) As Boolean
        Return node.HasAttributeOnAncestorOrSelf(generatedCodeAttributes)
    End Function

    <Extension> Public Function IsGenerated(context As SymbolAnalysisContext) As Boolean
        If context.Symbol Is Nothing Then Return False
        For Each syntaxReference As SyntaxReference In context.Symbol.DeclaringSyntaxReferences
            If syntaxReference.SyntaxTree.IsGenerated() Then Return True
            Dim root As SyntaxNode = syntaxReference.SyntaxTree.GetRoot()
            Dim node As SyntaxNode = root?.FindNode(syntaxReference.Span)
            If node.IsGenerated() Then Return True
        Next
        Return False
    End Function

    <Extension> Public Function IsGenerated(tree As SyntaxTree) As Boolean
        Return If(tree.FilePath?.IsOnGeneratedFile(), False) OrElse tree.HasAutoGeneratedComment()
    End Function

End Module
